<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PCA on DomsDev Data-Science</title>
    <link>https://domsdev.github.io/Data-science-blog/tags/pca/</link>
    <description>Recent content in PCA on DomsDev Data-Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/Domsdev/Data-science-blog/blob/main/MIT%20Licence.md&#34;&gt;DomsDev&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 09 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://domsdev.github.io/Data-science-blog/tags/pca/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unsupervised Learning PCA and K-mean</title>
      <link>https://domsdev.github.io/Data-science-blog/post/unsupervised_learning_pca_and_k-mean/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domsdev.github.io/Data-science-blog/post/unsupervised_learning_pca_and_k-mean/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective:&lt;/h2&gt;
&lt;p&gt;Load the MNIST dataset and split it into a training set and a test set (take the first 60,000 instances for training, and the remaining 10,000 for testing). Train a Random Forest classifier on the dataset and time how long it takes, then evaluate the resulting model on the test set. Next, use PCA to reduce the datasetâ€™s dimensionality, with an explained variance ratio of 95%. Train a new Random Forest classifier on the reduced dataset and see how long it takes. Was training much faster? Next evaluate the classifier on the test set: how does it compare to the previous classifier?&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
